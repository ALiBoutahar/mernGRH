{"ast":null,"code":"import _asyncToGenerator from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/SAVE D/github project/mernGRH/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"D:\\\\SAVE D\\\\github project\\\\mernGRH\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\n/**\n * @remix-run/router v1.2.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: function createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action: action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction createClientSideURL(location) {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  var base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" && window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n  var href = typeof location === \"string\" ? location : createPath(location);\n  invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n  return new URL(href, base);\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createClientSideURL(typeof to === \"string\" ? to : createPath(to));\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n\n  routes.forEach(function (route, index) {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  var _segments = _toArray(segments),\n      first = _segments[0],\n      rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n\n  return path.replace(/^:(\\w+)/g, function (_, key) {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/\\/:(\\w+)/g, function (_, key) {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return \"/\" + params[key];\n  }).replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref11 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref11.pathname,\n      _ref11$search = _ref11.search,\n      search = _ref11$search === void 0 ? \"\" : _ref11$search,\n      _ref11$hash = _ref11.hash,\n      hash = _ref11$hash === void 0 ? \"\" : _ref11$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref12 = _slicedToArray(_ref, 2),\n          key = _ref12[0],\n          value = _ref12[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeys.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n\n      var subscriber = this.subscriber;\n\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        subscriber && subscriber(false);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      subscriber && subscriber(false);\n      return data;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.subscriber = fn;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this3 = this;\n\n      this.controller.abort();\n      this.pendingKeys.forEach(function (v, k) {\n        return _this3.pendingKeys.delete(k);\n      });\n      var subscriber = this.subscriber;\n      subscriber && subscriber(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {\n        var _this4 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this4.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this4.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this4.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeys.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref13 = _slicedToArray(_ref2, 2),\n            key = _ref13[0],\n            value = _ref13[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n\n  if (internal === void 0) {\n    internal = false;\n  }\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n        matches = _getShortCircuitMatch.matches,\n        route = _getShortCircuitMatch.route;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, location, userReplace, historyAction, preventScrollReset;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n\n              location = _extends({}, location, init.history.encodeLocation(location));\n              userReplace = opts && opts.replace != null ? opts.replace : undefined;\n              historyAction = Action.Push;\n\n              if (userReplace === true) {\n                historyAction = Action.Replace;\n              } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n                // By default on submissions to the current location we REPLACE so that\n                // users don't have to double-click the back button to get to the prior\n                // location.  If the user redirects to a different location from the\n                // action/loader this will be ignored and the redirect will be a PUSH\n                historyAction = Action.Replace;\n              }\n\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              _context2.next = 12;\n              return startNavigation(historyAction, location, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace\n              });\n\n            case 12:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 14;\n                break;\n              }\n\n              _error = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch2 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n\n            case 14:\n              if (!isHashChangeOnly(state.location, location)) {\n                _context3.next = 17;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n\n            case 17:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createClientSideRequest(location, pendingNavigationController.signal, opts && opts.submission);\n\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 23;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 34;\n              break;\n\n            case 23:\n              if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n                _context3.next = 34;\n                break;\n              }\n\n              _context3.next = 26;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n\n            case 26:\n              actionOutput = _context3.sent;\n\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 29;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 29:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              navigation = _extends({\n                state: \"loading\",\n                location: location\n              }, opts.submission);\n              loadingNavigation = navigation; // Create a GET request for the loaders\n\n              request = new Request(request.url, {\n                signal: request.signal\n              });\n\n            case 34:\n              _context3.next = 36;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n            case 36:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 42;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 42:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, _extends({\n                matches: matches\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}, {\n                loaderData: loaderData,\n                errors: errors\n              }));\n\n            case 44:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = _extends({\n                state: \"submitting\",\n                location: location\n              }, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (actionMatch.route.action) {\n                _context4.next = 8;\n                break;\n              }\n\n              result = {\n                type: ResultType.error,\n                error: getInternalRouterError(405, {\n                  method: request.method,\n                  pathname: location.pathname,\n                  routeId: actionMatch.route.id\n                })\n              };\n              _context4.next = 13;\n              break;\n\n            case 8:\n              _context4.next = 10;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!request.signal.aborted) {\n                _context4.next = 13;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context4.next = 18;\n                break;\n              }\n\n              if (opts && opts.replace != null) {\n                replace = opts.replace;\n              } else {\n                // If the user didn't explicity indicate replace behavior, replace if\n                // we redirected to the exact same location we're currently at to avoid\n                // double back-buttons\n                replace = result.location === state.location.pathname + state.location.search;\n              }\n\n              _context4.next = 17;\n              return startRedirectNavigation(state, result, {\n                submission: submission,\n                replace: replace\n              });\n\n            case 17:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              if (!isErrorResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                // Send back an empty object we can use to clear out any prior actionData\n                pendingActionData: {},\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n\n            case 22:\n              if (!isDeferredResult(result)) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw new Error(\"defer() is not supported in actions\");\n\n            case 24:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, actionData, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation;\n\n              if (!loadingNavigation) {\n                navigation = _extends({\n                  state: \"loading\",\n                  location: location,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                }, submission);\n                loadingNavigation = navigation;\n              } // If this was a redirect from an action we don't have a \"submission\" but\n              // we have it on the loading navigation so use that if available\n\n\n              activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n                formMethod: loadingNavigation.formMethod,\n                formAction: loadingNavigation.formAction,\n                formData: loadingNavigation.formData,\n                formEncType: loadingNavigation.formEncType\n              } : undefined;\n              _getMatchesToLoad = getMatchesToLoad(state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 8;\n                break;\n              }\n\n              completeNavigation(location, _extends({\n                matches: matches,\n                loaderData: {},\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}));\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 8:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (_ref2) {\n                  var _ref14 = _slicedToArray(_ref2, 1),\n                      key = _ref14[0];\n\n                  var fetcher = state.fetchers.get(key);\n                  var revalidatingFetcher = {\n                    state: \"loading\",\n                    data: fetcher && fetcher.data,\n                    formMethod: undefined,\n                    formAction: undefined,\n                    formEncType: undefined,\n                    formData: undefined,\n                    \" _hasFetcherDoneAnything \": true\n                  };\n                  state.fetchers.set(key, revalidatingFetcher);\n                });\n                actionData = pendingActionData || state.actionData;\n                updateState(_extends({\n                  navigation: loadingNavigation\n                }, actionData ? Object.keys(actionData).length === 0 ? {\n                  actionData: null\n                } : {\n                  actionData: actionData\n                } : {}, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n\n              pendingNavigationLoadId = ++incrementingLoadId;\n              revalidatingFetchers.forEach(function (_ref3) {\n                var _ref15 = _slicedToArray(_ref3, 1),\n                    key = _ref15[0];\n\n                return fetchControllers.set(key, pendingNavigationController);\n              });\n              _context5.next = 13;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 13:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 19;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 19:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              revalidatingFetchers.forEach(function (_ref4) {\n                var _ref16 = _slicedToArray(_ref4, 1),\n                    key = _ref16[0];\n\n                return fetchControllers.delete(key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context5.next = 25;\n                break;\n              }\n\n              _context5.next = 24;\n              return startRedirectNavigation(state, redirect, {\n                replace: replace\n              });\n\n            case 24:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 25:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 30:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission;\n\n    var match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (match.route.action) {\n                _context6.next = 6;\n                break;\n              }\n\n              _error2 = getInternalRouterError(405, {\n                method: submission.formMethod,\n                pathname: path,\n                routeId: routeId\n              });\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              fetcher = _extends({\n                state: \"submitting\"\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              _context6.next = 15;\n              return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n            case 15:\n              actionResult = _context6.sent;\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 19;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 19:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 26;\n                break;\n              }\n\n              fetchControllers.delete(key);\n              fetchRedirectIds.add(key);\n              loadingFetcher = _extends({\n                state: \"loading\"\n              }, submission, {\n                data: undefined,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n                isFetchActionRedirect: true\n              }));\n\n            case 26:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 29;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 29:\n              if (isDeferredResult(actionResult)) {\n                invariant(false, \"defer() is not supported in actions\");\n              } // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n\n\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createClientSideRequest(nextLocation, abortController.signal);\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = _extends({\n                state: \"loading\",\n                data: actionResult.data\n              }, submission, {\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined, // No need to send through errors since we short circuit above\n              fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (_ref5) {\n                var _ref17 = _slicedToArray(_ref5, 1),\n                    staleKey = _ref17[0];\n\n                return staleKey !== key;\n              }).forEach(function (_ref6) {\n                var _ref18 = _slicedToArray(_ref6, 1),\n                    staleKey = _ref18[0];\n\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: existingFetcher && existingFetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                fetchControllers.set(staleKey, abortController);\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              _context6.next = 43;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 43:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 49;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 49:\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (_ref7) {\n                var _ref19 = _slicedToArray(_ref7, 1),\n                    staleKey = _ref19[0];\n\n                return fetchControllers.delete(staleKey);\n              });\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context6.next = 55;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n\n            case 55:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n                }, didAbortFetchLoads ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n\n            case 60:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30, _x31) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n              loadingFetcher = _extends({\n                state: \"loading\",\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              _context7.next = 9;\n              return callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename);\n\n            case 9:\n              result = _context7.sent;\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 17;\n                break;\n              }\n\n              _context7.next = 13;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 13:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 16:\n              result = _context7.t0;\n\n            case 17:\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 20;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 20:\n              if (!isRedirectResult(result)) {\n                _context7.next = 24;\n                break;\n              }\n\n              _context7.next = 23;\n              return startRedirectNavigation(state, result);\n\n            case 23:\n              return _context7.abrupt(\"return\");\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context7.next = 29;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 29:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              doneFetcher = {\n                state: \"idle\",\n                data: result.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n            case 33:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x32, _x33, _x34) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(state, redirect, _temp) {\n      var _window, _ref20, submission, replace, isFetchActionRedirect, redirectLocation, newOrigin, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref20 = _temp === void 0 ? {} : _temp, submission = _ref20.submission, replace = _ref20.replace, isFetchActionRedirect = _ref20.isFetchActionRedirect;\n\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n\n              redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n              _extends({\n                _isRedirect: true\n              }, isFetchActionRedirect ? {\n                _isFetchActionRedirect: true\n              } : {}));\n              invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n\n              if (!(typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n                _context8.next = 9;\n                break;\n              }\n\n              newOrigin = createClientSideURL(redirect.location).origin;\n\n              if (!(window.location.origin !== newOrigin)) {\n                _context8.next = 9;\n                break;\n              }\n\n              if (replace) {\n                window.location.replace(redirect.location);\n              } else {\n                window.location.assign(redirect.location);\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 9:\n              // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n              // state.navigation\n\n              _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n\n              if (!submission && formMethod && formAction && formData && formEncType) {\n                submission = {\n                  formMethod: formMethod,\n                  formAction: formAction,\n                  formEncType: formEncType,\n                  formData: formData\n                };\n              } // If this was a 307/308 submission we want to preserve the HTTP method and\n              // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n              // redirected location\n\n\n              if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n                _context8.next = 18;\n                break;\n              }\n\n              _context8.next = 16;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                submission: _extends({}, submission, {\n                  formAction: redirect.location\n                })\n              });\n\n            case 16:\n              _context8.next = 20;\n              break;\n\n            case 18:\n              _context8.next = 20;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                overrideNavigation: {\n                  state: \"loading\",\n                  location: redirectLocation,\n                  formMethod: submission ? submission.formMethod : undefined,\n                  formAction: submission ? submission.formAction : undefined,\n                  formEncType: submission ? submission.formEncType : undefined,\n                  formData: submission ? submission.formData : undefined\n                }\n              });\n\n            case 20:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x35, _x36, _x37, _x38, _x39) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, router.basename);\n              })), _toConsumableArray(fetchersToLoad.map(function (_ref8) {\n                var _ref21 = _slicedToArray(_ref8, 4),\n                    href = _ref21[1],\n                    match = _ref21[2],\n                    fetchMatches = _ref21[3];\n\n                return callLoaderOrAction(\"loader\", createClientSideRequest(href, request.signal), match, fetchMatches, router.basename);\n              }))));\n\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (_ref9) {\n                var _ref22 = _slicedToArray(_ref9, 3),\n                    match = _ref22[2];\n\n                return match;\n              }), fetcherResults, request.signal, true)]);\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator2 = _createForOfIteratorHelper(keys),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n\n    var _iterator3 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator4 = _createForOfIteratorHelper(fetchReloadIds),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n            key = _step4$value[0],\n            id = _step4$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  var basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  function query(_x40, _x41) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(request, _temp2) {\n      var _ref23, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error3, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _ref23 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref23.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\")) {\n                _context10.next = 11;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: method\n              });\n              _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 11:\n              if (matches) {\n                _context10.next = 15;\n                break;\n              }\n\n              _error3 = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route2.id, _error3),\n                statusCode: _error3.status,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 15:\n              _context10.next = 17;\n              return queryImpl(request, location, matches, requestContext);\n\n            case 17:\n              result = _context10.sent;\n\n              if (!isResponse(result)) {\n                _context10.next = 20;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 20:\n              return _context10.abrupt(\"return\", _extends({\n                location: location,\n                basename: basename\n              }, result));\n\n            case 21:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x42, _x43) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(request, _temp3) {\n      var _ref24, routeId, requestContext, url, method, location, matches, match, result, error, routeData;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _ref24 = _temp3 === void 0 ? {} : _temp3, routeId = _ref24.routeId, requestContext = _ref24.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\")) {\n                _context11.next = 9;\n                break;\n              }\n\n              throw getInternalRouterError(405, {\n                method: method\n              });\n\n            case 9:\n              if (matches) {\n                _context11.next = 11;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 11:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n\n              if (!(routeId && !match)) {\n                _context11.next = 16;\n                break;\n              }\n\n              throw getInternalRouterError(403, {\n                pathname: location.pathname,\n                routeId: routeId\n              });\n\n            case 16:\n              if (match) {\n                _context11.next = 18;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 18:\n              _context11.next = 20;\n              return queryImpl(request, location, matches, requestContext, match);\n\n            case 20:\n              result = _context11.sent;\n\n              if (!isResponse(result)) {\n                _context11.next = 23;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 23:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n              if (!(error !== undefined)) {\n                _context11.next = 26;\n                break;\n              }\n\n              throw error;\n\n            case 26:\n              // Pick off the right state value to return\n              routeData = [result.actionData, result.loaderData].find(function (v) {\n                return v;\n              });\n              return _context11.abrupt(\"return\", Object.values(routeData || {})[0]);\n\n            case 28:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x44, _x45, _x46, _x47, _x48) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context12.prev = 1;\n\n              if (!isMutationMethod(request.method.toLowerCase())) {\n                _context12.next = 7;\n                break;\n              }\n\n              _context12.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n\n            case 5:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", _result);\n\n            case 7:\n              _context12.next = 9;\n              return loadRouteData(request, matches, requestContext, routeMatch);\n\n            case 9:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n\n              if (!isQueryRouteResponse(_context12.t0)) {\n                _context12.next = 19;\n                break;\n              }\n\n              if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n                _context12.next = 18;\n                break;\n              }\n\n              throw _context12.t0.response;\n\n            case 18:\n              return _context12.abrupt(\"return\", _context12.t0.response);\n\n            case 19:\n              if (!isRedirectResponse(_context12.t0)) {\n                _context12.next = 21;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", _context12.t0);\n\n            case 21:\n              throw _context12.t0;\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x49, _x50, _x51, _x52, _x53) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, boundaryMatch, _context13, loaderRequest, context;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (actionMatch.route.action) {\n                _context14.next = 7;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: actionMatch.route.id\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              result = {\n                type: ResultType.error,\n                error: error\n              };\n              _context14.next = 13;\n              break;\n\n            case 7:\n              _context14.next = 9;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n\n            case 9:\n              result = _context14.sent;\n\n              if (!request.signal.aborted) {\n                _context14.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n\n            case 15:\n              if (!isDeferredResult(result)) {\n                _context14.next = 17;\n                break;\n              }\n\n              throw new Error(\"defer() is not supported in actions\");\n\n            case 17:\n              if (!isRouteRequest) {\n                _context14.next = 21;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context14.next = 20;\n                break;\n              }\n\n              throw result.error;\n\n            case 20:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {}\n              });\n\n            case 21:\n              if (!isErrorResult(result)) {\n                _context14.next = 27;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 25;\n              return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n\n            case 25:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 27:\n              // Create a GET request for the loaders\n              loaderRequest = new Request(request.url, {\n                headers: request.headers,\n                redirect: request.redirect,\n                signal: request.signal\n              });\n              _context14.next = 30;\n              return loadRouteData(loaderRequest, matches, requestContext);\n\n            case 30:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 32:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x54, _x55, _x56, _x57, _x58) {\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, executedLoaders, context;\n      return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n              if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader))) {\n                _context15.next = 3;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: routeMatch == null ? void 0 : routeMatch.route.id\n              });\n\n            case 3:\n              requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader;\n              }); // Short circuit if we have no loaders to run (query())\n\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 7;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                // Add a null for all matched routes for proper revalidation on the client\n                loaderData: matches.reduce(function (acc, m) {\n                  return Object.assign(acc, _defineProperty({}, m.route.id, null));\n                }, {}),\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {}\n              });\n\n            case 7:\n              _context15.next = 9;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext);\n              })));\n\n            case 9:\n              results = _context15.sent;\n\n              if (!request.signal.aborted) {\n                _context15.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              executedLoaders = new Set();\n              results.forEach(function (result, i) {\n                executedLoaders.add(matchesToLoad[i].route.id); // Can't do anything with these without the Remix side of things, so just\n                // cancel them for now\n\n                if (isDeferredResult(result)) {\n                  result.deferredData.cancel();\n                }\n              }); // Process and commit output from loaders\n\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError); // Add a null for any non-loader matches for proper revalidation on the client\n\n              matches.forEach(function (match) {\n                if (!executedLoaders.has(match.route.id)) {\n                  context.loaderData[match.route.id] = null;\n                }\n              });\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches\n              }));\n\n            case 18:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  var submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path);\n\n  try {\n    var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path: path,\n      error: getInternalRouterError(400)\n    };\n  }\n\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    return match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    }) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (_ref10, key) {\n    var _ref27 = _slicedToArray(_ref10, 3),\n        href = _ref27[0],\n        match = _ref27[1],\n        fetchMatches = _ref27[2]; // This fetcher was cancelled from a prior action submission - force reload\n\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      var shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var currentUrl = createClientSideURL(currentLocation);\n  var currentParams = currentMatch.params;\n  var nextUrl = createClientSideURL(location);\n  var nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  var defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    var routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl: currentUrl,\n      currentParams: currentParams,\n      nextUrl: nextUrl,\n      nextParams: nextParams\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nfunction callLoaderOrAction(_x59, _x60, _x61, _x62, _x63, _x64, _x65, _x66) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, isAbsolute, activeMatches, routePathnames, resolvedLocation, path, data, contentType;\n    return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (basename === void 0) {\n              basename = \"/\";\n            }\n\n            if (isStaticRequest === void 0) {\n              isStaticRequest = false;\n            }\n\n            if (isRouteRequest === void 0) {\n              isRouteRequest = false;\n            }\n\n            abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n\n            onReject = function onReject() {\n              return reject();\n            };\n\n            request.signal.addEventListener(\"abort\", onReject);\n            _context16.prev = 6;\n            handler = match.route[type];\n            invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n            _context16.next = 11;\n            return Promise.race([handler({\n              request: request,\n              params: match.params,\n              context: requestContext\n            }), abortPromise]);\n\n          case 11:\n            result = _context16.sent;\n            invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n            _context16.next = 19;\n            break;\n\n          case 15:\n            _context16.prev = 15;\n            _context16.t0 = _context16[\"catch\"](6);\n            resultType = ResultType.error;\n            result = _context16.t0;\n\n          case 19:\n            _context16.prev = 19;\n            request.signal.removeEventListener(\"abort\", onReject);\n            return _context16.finish(19);\n\n          case 22:\n            if (!isResponse(result)) {\n              _context16.next = 48;\n              break;\n            }\n\n            status = result.status; // Process redirects\n\n            if (!redirectStatusCodes.has(status)) {\n              _context16.next = 33;\n              break;\n            }\n\n            location = result.headers.get(\"Location\");\n            invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n            isAbsolute = /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\"); // Support relative routing in internal redirects\n\n            if (!isAbsolute) {\n              activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n              routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n                return match.pathnameBase;\n              });\n              resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n              invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n              if (basename) {\n                path = resolvedLocation.pathname;\n                resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n              }\n\n              location = createPath(resolvedLocation);\n            } // Don't process redirects in the router during static requests requests.\n            // Instead, throw the Response and let the server handle it with an HTTP\n            // redirect.  We also update the Location header in place in this flow so\n            // basename and relative routing is taken into account\n\n\n            if (!isStaticRequest) {\n              _context16.next = 32;\n              break;\n            }\n\n            result.headers.set(\"Location\", location);\n            throw result;\n\n          case 32:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n            });\n\n          case 33:\n            if (!isRouteRequest) {\n              _context16.next = 35;\n              break;\n            }\n\n            throw {\n              type: resultType || ResultType.data,\n              response: result\n            };\n\n          case 35:\n            contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n            if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n              _context16.next = 42;\n              break;\n            }\n\n            _context16.next = 39;\n            return result.json();\n\n          case 39:\n            data = _context16.sent;\n            _context16.next = 45;\n            break;\n\n          case 42:\n            _context16.next = 44;\n            return result.text();\n\n          case 44:\n            data = _context16.sent;\n\n          case 45:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 47;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponse(status, result.statusText, data),\n              headers: result.headers\n            });\n\n          case 47:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 48:\n            if (!(resultType === ResultType.error)) {\n              _context16.next = 50;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n\n          case 50:\n            if (!(result instanceof DeferredData)) {\n              _context16.next = 52;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result\n            });\n\n          case 52:\n            return _context16.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n\n          case 53:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15, null, [[6, 15, 19, 22]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction createClientSideRequest(location, signal, submission) {\n  var url = createClientSideURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType,\n        formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator5 = _createForOfIteratorHelper(formData.entries()),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _step5$value = _slicedToArray(_step5.value, 2),\n          key = _step5$value[0],\n          value = _step5$value[1];\n\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      searchParams.append(key, value);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = _slicedToArray(revalidatingFetchers[index], 3),\n        key = _revalidatingFetchers[0],\n        match = _revalidatingFetchers[2];\n\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  var _iterator6 = _createForOfIteratorHelper(matches),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var match = _step6.value;\n      var id = match.route.id;\n\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined) {\n        mergedLoaderData[id] = loaderData[id];\n      }\n\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  var _ref28 = _temp4 === void 0 ? {} : _temp4,\n      pathname = _ref28.pathname,\n      routeId = _ref28.routeId,\n      method = _ref28.method;\n\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nfunction resolveDeferredResults(_x67, _x68, _x69, _x70, _x71, _x72) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n\n    return _regeneratorRuntime.wrap(function _callee16$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime.wrap(function _loop$(_context17) {\n                while (1) {\n                  switch (_context17.prev = _context17.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index];\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context17.next = 7;\n                        break;\n                      }\n\n                      _context17.next = 7;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 7:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context18.next = 7;\n              break;\n            }\n\n            return _context18.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            index++;\n            _context18.next = 2;\n            break;\n\n          case 7:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x73, _x74, _x75) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime.wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context19.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context19.sent;\n\n            if (!aborted) {\n              _context19.next = 6;\n              break;\n            }\n\n            return _context19.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context19.next = 14;\n              break;\n            }\n\n            _context19.prev = 7;\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context19.prev = 11;\n            _context19.t0 = _context19[\"catch\"](7);\n            return _context19.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context19.t0\n            });\n\n          case 14:\n            return _context19.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","current","_ref","parsedPath","searchIndex","createClientSideURL","origin","invariant","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","explodeOptionalSegments","exploded","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","_","prefix","__","str","star","pattern","compilePath","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeys","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolve","size","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizeNavigateOptions","submission","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","_extends","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getMatchesToLoad","matchesToLoad","revalidatingFetchers","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","results","loaderResults","fetcherResults","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","redirectLocation","_isFetchActionRedirect","_window","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","fetchMatches","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","executedLoaders","processRouteLoaderData","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","onReject","handler","resultType","isAbsolute","activeMatches","resolvedLocation","contentType","text","deferred","toUpperCase","body","URLSearchParams","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","hasErrorBoundary","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","resolveData","unwrappedData","getAll","handle","pathMatches"],"sources":["D:\\SAVE D\\github project\\mernGRH\\client\\node_modules\\@remix-run\\router\\history.ts","D:\\SAVE D\\github project\\mernGRH\\client\\node_modules\\@remix-run\\router\\utils.ts","D:\\SAVE D\\github project\\mernGRH\\client\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createClientSideURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(\n    base,\n    `No window.location.(origin|href) available to create URL for href: ${href}`\n  );\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(\n        typeof to === \"string\" ? to : createPath(to)\n      );\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return path\n    .replace(/^:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return `/${params[key]!}`;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createClientSideURL,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (typeof window?.location !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    let executedLoaders = new Set<string>();\n    results.forEach((result, i) => {\n      executedLoaders.add(matchesToLoad[i].route.id);\n      // Can't do anything with these without the Remix side of things, so just\n      // cancel them for now\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute =\n        /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\");\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}